{
  "kviz": [
    {
      "title": "Colloquial style",
      "questions": [
        {
          "example": "Whatever happens, just stay <b>cool</b>.",
          "solution": "metaphor",
          "explanation": "we <b>compare</b> coolness with calmness",
          "model": "temper is temperature"
        },
        {
          "example": "Check with <b>payroll</b> why you weren't reimbursed for commuting.",
          "solution": "metonymy",
          "explanation": "we <b>relate</b> a department in a company to what this department does",
          "model": "performer for action"
        },
        {
          "example": "This movie is a real <b>junk</b>.",
          "solution": "metaphor",
          "explanation": "we <b>compare</b> the movie to domestic junk in terms of worthiness",
          "model": "creation is every-day life"
        },
        {
          "example": "Don't <b>be</b> that way.",
          "solution": "metonymy",
          "explanation": "we <b>relate</b> a person to that person's behaviour",
          "model": "person for behaviour"
        },
        {
          "example": "Many developers write <b>ugly</b> code.",
          "solution": "metaphor",
          "explanation": "we <b>compare</b> quality, readability or maintainability of code with beauty",
          "model": "quality is beauty"
        }
      ]
    },
    {
      "title": "Administrative or journalist style",
      "questions": [
        {
          "example": "Using <b>graphic</b> language at work has been long frowned upon.",
          "solution": "metonymy",
          "explanation": "we <b>relate</b> visual explicitness to verbal one",
          "model": "visual for verbal"
        },
        {
          "example": "Using graphic language at work has been long <b>frowned upon</b>.",
          "solution": "metonymy",
          "explanation": "we <b>relate</b> a certain face gesture to the usual meaning of that gesture",
          "model": "gesture for meaning"
        },
        {
          "example": "The question is where the <b>line should be drawn</b>.",
          "solution": "metaphor",
          "explanation": "we <b>compare</b> a graphical line, often used as delimiter, to the limit in general",
          "model": "visual is semantic"
        },
        {
          "example": "There is no reason to use such <b>harsh</b> words.",
          "solution": "metaphor",
          "explanation": "we <b>compare</b> harshness of certain words to physical harshness",
          "model": "language is physical world"
        },
        {
          "example": "Our guest is the principal <b>viola</b> in the Concertgebouworkest.",
          "solution": "metonymy",
          "explanation": "we <b>relate</b> an instrumentalist to the instrument he plays",
          "model": "worker for tool"
        }
      ]
    },
    {
      "title": "HTML tag names",
      "questions": [
        {
          "example": "<head>",
          "solution": "metaphor",
          "explanation": "we <b>compare</b> the HTML <head> element with the living being's head in terms of its relative position",
          "model": "html is living being"
        },
        {
          "example": "<article>",
          "solution": "metonymy",
          "explanation": "we <b>relate</b> the HTML <article> element with what it contains",
          "model": "container for content"
        },
        {
          "example": "<main>",
          "solution": "metonymy",
          "explanation": "we <b>relate</b> the HTML <main> element with its semantical position in the document's hierarchy",
          "model": "element for role"
        },
        {
          "example": "<label>",
          "solution": "metaphor",
          "explanation": "we <b>compare</b> the HTML <label> element with the physical label in terms of function",
          "model": "html is physical world"
        },
        {
          "example": "<aside>",
          "solution": "metonymy",
          "explanation": "we <b>relate</b> the HTML <aside> element with its position on screen",
          "model": "element for position"
        }
      ]
    },
    {
      "title": "HTML attributes",
      "questions": [
        {
          "example": "<input type=\"<b>radio</b>\">",
          "solution": "metaphor",
          "explanation": "we <b>compare</b> the value of an attribute with buttons on an actual radio receiver in terms that selecting one deselects others",
          "model": "html form is radio device"
        },
        {
          "example": "<input type=\"<b>reset</b>\">",
          "solution": "metonymy",
          "explanation": "we <b>relate</b> the value of an attribute to what this <input> element does",
          "model": "attribute for purpose"
        },
        {
          "example": "<video src=\"video.mp4\" <b>poster</b>=\"image.jpg\">",
          "solution": "metaphor",
          "explanation": "we <b>compare</b> the name of an attribute to a physical poster in terms of appearance",
          "model": "html is physical world"
        },
        {
          "example": "<label <b>for</b>=\"username\">",
          "solution": "metonymy",
          "explanation": "we <b>relate</b> the name of an attribute to the purpose of connecting the label to its corresponding form element",
          "model": "attribute name for purpose"
        }
      ]
    },
    {
      "title": "CSS attributes",
      "questions": [
        {
          "example": "display: <b>flex</b>",
          "solution": "metaphor",
          "explanation": "we <b>compare</b> the flexibility of items within flexbox to the flexibility in nature",
          "model": "css is physical world"
        },
        {
          "example": "background-size: <b>contain</b>",
          "solution": "metonymy",
          "explanation": "we <b>relate</b> the value to the purpose, e.g. it should be contained in the parent element",
          "model": "value for purpose"
        },
        {
          "example": "<b>box</b>-sizing: border-box;",
          "solution": "metaphor",
          "explanation": "we <b>compare</b> an HTML element to the physical box in terms that both are in rectangular shape",
          "model": "html is physical world"
        },
        {
          "example": "font-size: <b>inherit</b>",
          "solution": "metaphor",
          "explanation": "we <b>compare</b> inheriting a property from parent element in CSS to the way children in the real world inherit properties from their parents",
          "model": "css is physical world"
        },
        {
          "example": "cursor: <b>wait</b>",
          "solution": "metonymy",
          "explanation": "we <b>relate</b> the value to the message, meaning that cursor shape should suggest user should wait until current action is done",
          "model": "value for purpose"
        }
      ]
    },
    {
      "title": "JS keywords",
      "questions": [
        {
          "example": "const getPosts = new <b>Promise</b>((resolve, reject) => { ... })",
          "solution": "metaphor",
          "explanation": "we <b>compare</b> promise in JS with promise in real life in terms that promise can be either fulfilled or not",
          "model": "API is real life"
        },
        {
          "example": ".<b>then</b>(() => { ... }).catch(() => { ... })",
          "solution": "metonymy",
          "explanation": "we <b>relate</b> the name of code block to the time context in which it will be executed",
          "model": "name for time context"
        },
        {
          "example": "<b>catch</b>(() => { ... })",
          "solution": "metaphor",
          "explanation": "we <b>compare</b> catching an API error to catching a physical object in terms of purpose, to prevent it from falling and breaking",
          "model": "API is real life"
        },
        {
          "example": "event.<b>bubbles</b>",
          "solution": "metaphor",
          "explanation": "we <b>compare</b> bubbling in JS to the movement of physical bubbles, which move upwards, like event bubbles up the DOM tree",
          "model": "DOM is real world"
        },
        {
          "example": "const { isThinking, isConnected } = <b>this</b>.props",
          "solution": "metonymy",
          "explanation": "using a pronoun instead of noun is by default metonymical, and we <b>relate</b> 'this' for the container class",
          "model": "pronoun for noun"
        }
      ]
    },
    {
      "title": "JS concepts",
      "questions": [
        {
          "example": "const { someProp, otherProp } = whatever",
          "solution": "metonymy",
          "explanation": "destructuring is a metonymical concept. We <b>relate</b> object properties to parent object",
          "model": "part for whole"
        },
        {
          "example": "someArray.forEach((item, index) => { ... })",
          "solution": "metonymy",
          "explanation": "any iteration in any programming language is metonymical. We <b>relate</b> currently iterated item to parent",
          "model": "part for whole"
        },
        {
          "example": "function fct(a) { if (a === 1) { return a } return a * fct(a - 1) }",
          "solution": "metonymy",
          "explanation": "recursion is probably the most metonymical of all, because we <b>relate</b> recursive function to nothing else but itself",
          "model": "part for whole"
        },
        {
          "example": "return (b) => { return (c) => { return a + b * c }}",
          "solution": "metonymy",
          "explanation": "currying is typically metonymical. We <b>relate</b> every further function to the outcome of the previous in the chain",
          "model": "successor for predecessor"
        }
      ]
    }
  ]
}
